import numpy as np
import os
import scipy.io

import torch
from data.datasets.BaseDatasets import BaseEEGDatasetSubjectsBlocks

from torchvision import transforms


class SynthSSVEPMK(BaseEEGDatasetSubjectsBlocks):
    """
    SSVEP Data generated by MK using IFFT from FFT obtained from one real example and sliding window
    each FFT bin value has mean and standard deviation calculated from real example
    """
    channels = ['1']
    target_freqs = [7, 8]
    fs = 256
    num_subjects = 10000
    num_blocks = 5
    num_chars = 2

    def __init__(self, *args, **kwargs):
        self.files = kwargs.get('files', ['dane_MK.mat'])
        super(SynthSSVEPMK, self).__init__(*args, **kwargs)

    def _get_start_end(self):
        start = 0
        end = 256
        return end, start

    def _get_file_list(self):
        return self.files

    def _load_data_raw(self, dataset_dir, files):
        print('reading data files')
        mat = scipy.io.loadmat(dataset_dir / files[0])
        s7, s8 = mat['S7'], mat['S8']
        # targets7 = s7.shape[0] * [0]
        # targets8 = s8.shape[0] * [1]
        # targets = np.concatenate([targets7, targets8])
        # data = np.concatenate([s7, s8])
        data = np.empty((s7.shape[0] + s8.shape[0], s7.shape[1]), dtype=s7.dtype)
        data[0::2, :] = s7
        data[1::2, :] = s8
        # data = np.array(data)
        data = np.expand_dims(data, 1)  # single channel
        targets = s7.shape[0] * [0, 1]
        targets = np.array(targets)
        return data, targets